#region Неудачный способ чере латинский гиперкуб
//Мы вычисляем многомерный интеграл методом латинского гиперкуба и грубым методом Монте-Карло для функции. 
//Мы генерируем точки в латинском гиперкубе, используя случайное смещение для каждого измерения. 
//Затем мы вычисляем значение функции в каждой точке и суммируем их. 
//Далее мы находим среднее значение функции, умножаем его на объем гиперкуба и получаем приближенное значение интеграла.

//int dimensions = 2; // Размерность пространства
//int numPoints = 1000000; // Общее количество точек
//double integral = 0.0;

//Random random = new Random();

//for (int i = 0; i < numPoints; i++)
//{
//    double[] point = GenerateLatinHypercube(dimensions, random); // Генерируем точку методом латинского гиперкуба

//    double functionValue = MyFunction(point); // Находим значение функции в данной точке

//    integral += Convert.ToDouble(functionValue);
//}

//double volume = Math.Pow(1.0, dimensions); // Находим объем гиперкуба
//double averageFunctionValue = integral / numPoints; // Находим среднее значение
//double result = volume * averageFunctionValue;

//Console.WriteLine("Вычисленное значение интеграла: " + result);

//static double[] GenerateLatinHypercube(int dimensions, Random random)
//{
//    double[] point = new double[dimensions];
//    double step = 1.0 / dimensions;

//    for (int i = 0; i < dimensions; i++)
//    {
//        double offset = random.NextDouble(); // Случайное смещение для каждого измерения
//        point[i] = (i + offset) * step; // Генерируем точку в латинском гиперкубе
//    }
//    return point;
//}

//static double MyFunction(double[] point)
//{
//    double x = point[0];
//    double y = point[1];
//    //double z = point[2];
//    double result = Math.Sin(x) + Math.Cos(y) /*1 / (1 + Math.Pow(x * x + y * y + z * z, 3 / 2))*/;

//    return result;
//}
#endregion

#region Пошаговые действия
//Метод Монте-Карло основан на использовании случайных чисел для приближенного вычисления интегралов. Вот шаги алгоритма:

//Определение функции: Сначала нужно определить функцию, для которой вы хотите вычислить многомерный интеграл. Пусть это будет функция f(x1, x2, ..., xn), где x1, x2, ..., xn - это переменные интегрирования.

//Определение границ: Затем нужно определить границы интегрирования для каждой переменной. Пусть a1, b1, a2, b2, ..., an, bn - это границы интегрирования для каждой переменной.

//Генерация случайных точек: Следующий шаг - сгенерировать случайные точки внутри области интегрирования. Для каждой переменной xi генерируется случайное число ri в диапазоне от ai до bi.

//Вычисление значения функции: Для каждой сгенерированной случайной точки (r1, r2, ..., rn) вычисляем значение функции f в этой точке.

//Вычисление среднего значения: Вычисляем среднее значение функции, используя формулу:
//среднее значение = (сумма значений функции) / (количество сгенерированных точек)

//Вычисление объема области интегрирования: Вычисляем объем области интегрирования, умножая среднее значение функции на объем области интегрирования. Объем области интегрирования может быть вычислен как произведение разностей границ интегрирования для каждой переменной.

//Получение приближенного значения интеграла: Итоговое приближенное значение интеграла будет равно объему области интегрирования.
#endregion

// Определение функции
Func<double[], double> f = (x) => Math.Sin(x[0]) + Math.Cos(x[1]) + Math.Sin(x[2]); // Ответ: 4Pi^2

// Определение границ интегрирования
double a1 = 0, b1 = Math.PI;
double a2 = 0, b2 = Math.PI;
double a3 = 0, b3 = 2 * Math.PI;

// Количество генерируемых точек
int n = 1000000;

// Генерация случайных точек и вычисление значения функции
double sum = 0;
Random rand = new Random();
for (int i = 0; i < n; i++)
{
    double[] point = new double[3];
    point[0] = rand.NextDouble() * (b1 - a1) + a1;
    point[1] = rand.NextDouble() * (b2 - a2) + a2;
    point[2] = rand.NextDouble() * (b3 - a3) + a3;
    sum += f(point);
}

// Вычисление среднего значения
double average = sum / n;

// Вычисление объема области интегрирования
double volume = (b1 - a1) * (b2 - a2) * (b3 - a3);

// Вычисление приближенного значения интеграла
double integral = average * volume;

Console.WriteLine("Приближенное значение интеграла: " + integral);